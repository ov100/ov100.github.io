(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{368:function(t,n,s){"use strict";s.r(n);var a=s(25),e=Object(a.a)({},(function(){var t=this,n=t.$createElement,s=t._self._c||n;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"synchronized"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#synchronized"}},[t._v("#")]),t._v(" synchronized")]),t._v(" "),s("h2",{attrs:{id:"_1-synchronized-关键字"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-synchronized-关键字"}},[t._v("#")]),t._v(" 1.synchronized 关键字")]),t._v(" "),s("p",[s("img",{attrs:{src:"images/interview-questions/synchronized%E5%85%B3%E9%94%AE%E5%AD%97.png",alt:""}})]),t._v(" "),s("h3",{attrs:{id:"_1-1-说一说自己对于-synchronized-关键字的了解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-说一说自己对于-synchronized-关键字的了解"}},[t._v("#")]),t._v(" 1.1.说一说自己对于 synchronized 关键字的了解")]),t._v(" "),s("p",[s("strong",[s("code",[t._v("synchronized")]),t._v(" 关键字解决的是多个线程之间访问资源的同步性，"),s("code",[t._v("synchronized")]),t._v("关键字可以保证被它修饰的方法或者代码块在任意时刻只能有一个线程执行。")])]),t._v(" "),s("p",[t._v("另外，在 Java 早期版本中，"),s("code",[t._v("synchronized")]),t._v(" 属于 "),s("strong",[t._v("重量级锁")]),t._v("，效率低下。")]),t._v(" "),s("p",[s("strong",[t._v("为什么呢？")])]),t._v(" "),s("p",[t._v("因为监视器锁（monitor）是依赖于底层的操作系统的 "),s("code",[t._v("Mutex Lock")]),t._v(" 来实现的，Java 的线程是映射到操作系统的原生线程之上的。如果要挂起或者唤醒一个线程，都需要操作系统帮忙完成，而操作系统实现线程之间的切换时需要从用户态转换到内核态，这个状态之间的转换需要相对比较长的时间，时间成本相对较高。")]),t._v(" "),s("p",[t._v("庆幸的是在 Java 6 之后 Java 官方对从 JVM 层面对 "),s("code",[t._v("synchronized")]),t._v(" 较大优化，所以现在的 "),s("code",[t._v("synchronized")]),t._v(" 锁效率也优化得很不错了。JDK1.6 对锁的实现引入了大量的优化，如自旋锁、适应性自旋锁、锁消除、锁粗化、偏向锁、轻量级锁等技术来减少锁操作的开销。")]),t._v(" "),s("p",[t._v("所以，你会发现目前的话，不论是各种开源框架还是 JDK 源码都大量使用了 "),s("code",[t._v("synchronized")]),t._v(" 关键字。")]),t._v(" "),s("h3",{attrs:{id:"_1-2-说说自己是怎么使用-synchronized-关键字"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-说说自己是怎么使用-synchronized-关键字"}},[t._v("#")]),t._v(" 1.2. 说说自己是怎么使用 synchronized 关键字")]),t._v(" "),s("p",[s("strong",[t._v("synchronized 关键字最主要的三种使用方式：")])]),t._v(" "),s("p",[s("strong",[t._v("1.修饰实例方法:")]),t._v(" 作用于当前对象实例加锁，进入同步代码前要获得 "),s("strong",[t._v("当前对象实例的锁")])]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("synchronized")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("method")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//业务代码")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[s("strong",[t._v("2.修饰静态方法:")]),t._v(" 也就是给当前类加锁，会作用于类的所有对象实例 ，进入同步代码前要获得 "),s("strong",[t._v("当前 class 的锁")]),t._v("。因为静态成员不属于任何一个实例对象，是类成员（ "),s("em",[t._v("static 表明这是该类的一个静态资源，不管 new 了多少个对象，只有一份")]),t._v("）。所以，如果一个线程 A 调用一个实例对象的非静态 "),s("code",[t._v("synchronized")]),t._v(" 方法，而线程 B 需要调用这个实例对象所属类的静态 "),s("code",[t._v("synchronized")]),t._v(" 方法，是允许的，不会发生互斥现象，"),s("strong",[t._v("因为访问静态 "),s("code",[t._v("synchronized")]),t._v(" 方法占用的锁是当前类的锁，而访问非静态 "),s("code",[t._v("synchronized")]),t._v(" 方法占用的锁是当前实例对象锁")]),t._v("。")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("synchronized")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" staic "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("method")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//业务代码")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[s("strong",[t._v("3.修饰代码块")]),t._v(" ：指定加锁对象，对给定对象/类加锁。"),s("code",[t._v("synchronized(this|object)")]),t._v(" 表示进入同步代码库前要获得"),s("strong",[t._v("给定对象的锁")]),t._v("。"),s("code",[t._v("synchronized(类.class)")]),t._v(" 表示进入同步代码前要获得 "),s("strong",[t._v("当前 class 的锁")])]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("synchronized")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//业务代码")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[s("strong",[t._v("总结：")])]),t._v(" "),s("ul",[s("li",[s("code",[t._v("synchronized")]),t._v(" 关键字加到 "),s("code",[t._v("static")]),t._v(" 静态方法和 "),s("code",[t._v("synchronized(class)")]),t._v(" 代码块上都是是给 Class 类上锁。")]),t._v(" "),s("li",[s("code",[t._v("synchronized")]),t._v(" 关键字加到实例方法上是给对象实例上锁。")]),t._v(" "),s("li",[t._v("尽量不要使用 "),s("code",[t._v("synchronized(String a)")]),t._v(" 因为 JVM 中，字符串常量池具有缓存功能！")])]),t._v(" "),s("p",[t._v("下面我以一个常见的面试题为例讲解一下 "),s("code",[t._v("synchronized")]),t._v(" 关键字的具体使用。")]),t._v(" "),s("p",[t._v("面试中面试官经常会说：“单例模式了解吗？来给我手写一下！给我解释一下双重检验锁方式实现单例模式的原理呗！”")]),t._v(" "),s("p",[s("strong",[t._v("双重校验锁实现对象单例（线程安全）")])]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Singleton")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("volatile")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Singleton")]),t._v(" uniqueInstance"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Singleton")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Singleton")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getUniqueInstance")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n       "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//先判断对象是否已经实例过，没有实例化过才进入加锁代码")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("uniqueInstance "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//类对象加锁")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("synchronized")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Singleton")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("uniqueInstance "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                    uniqueInstance "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Singleton")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" uniqueInstance"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("另外，需要注意 "),s("code",[t._v("uniqueInstance")]),t._v(" 采用 "),s("code",[t._v("volatile")]),t._v(" 关键字修饰也是很有必要。")]),t._v(" "),s("p",[s("code",[t._v("uniqueInstance")]),t._v(" 采用 "),s("code",[t._v("volatile")]),t._v(" 关键字修饰也是很有必要的， "),s("code",[t._v("uniqueInstance = new Singleton();")]),t._v(" 这段代码其实是分为三步执行：")]),t._v(" "),s("ol",[s("li",[t._v("为 "),s("code",[t._v("uniqueInstance")]),t._v(" 分配内存空间")]),t._v(" "),s("li",[t._v("初始化 "),s("code",[t._v("uniqueInstance")])]),t._v(" "),s("li",[t._v("将 "),s("code",[t._v("uniqueInstance")]),t._v(" 指向分配的内存地址")])]),t._v(" "),s("p",[t._v("但是由于 JVM 具有指令重排的特性，执行顺序有可能变成 1->3->2。指令重排在单线程环境下不会出现问题，但是在多线程环境下会导致一个线程获得还没有初始化的实例。例如，线程 T1 执行了 1 和 3，此时 T2 调用 "),s("code",[t._v("getUniqueInstance")]),t._v("() 后发现 "),s("code",[t._v("uniqueInstance")]),t._v(" 不为空，因此返回 "),s("code",[t._v("uniqueInstance")]),t._v("，但此时 "),s("code",[t._v("uniqueInstance")]),t._v(" 还未被初始化。")]),t._v(" "),s("p",[t._v("使用 "),s("code",[t._v("volatile")]),t._v(" 可以禁止 JVM 的指令重排，保证在多线程环境下也能正常运行。")]),t._v(" "),s("h3",{attrs:{id:"_1-3-构造方法可以使用-synchronized-关键字修饰么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-构造方法可以使用-synchronized-关键字修饰么"}},[t._v("#")]),t._v(" 1.3. 构造方法可以使用 synchronized 关键字修饰么？")]),t._v(" "),s("p",[t._v("先说结论："),s("strong",[t._v("构造方法不能使用 synchronized 关键字修饰。")])]),t._v(" "),s("p",[t._v("构造方法本身就属于线程安全的，不存在同步的构造方法一说。")]),t._v(" "),s("h3",{attrs:{id:"_1-3-讲一下-synchronized-关键字的底层原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-讲一下-synchronized-关键字的底层原理"}},[t._v("#")]),t._v(" 1.3. 讲一下 synchronized 关键字的底层原理")]),t._v(" "),s("p",[s("strong",[t._v("synchronized 关键字底层原理属于 JVM 层面。")])]),t._v(" "),s("h4",{attrs:{id:"_1-3-1-synchronized-同步语句块的情况"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-1-synchronized-同步语句块的情况"}},[t._v("#")]),t._v(" 1.3.1. synchronized 同步语句块的情况")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SynchronizedDemo")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("method")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("synchronized")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\t"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"synchronized 代码块"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),s("p",[t._v("通过 JDK 自带的 "),s("code",[t._v("javap")]),t._v(" 命令查看 "),s("code",[t._v("SynchronizedDemo")]),t._v(" 类的相关字节码信息：首先切换到类的对应目录执行 "),s("code",[t._v("javac SynchronizedDemo.java")]),t._v(" 命令生成编译后的 .class 文件，然后执行"),s("code",[t._v("javap -c -s -v -l SynchronizedDemo.class")]),t._v("。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/2019-6/synchronized%E5%85%B3%E9%94%AE%E5%AD%97%E5%8E%9F%E7%90%86.png",alt:"synchronized关键字原理"}})]),t._v(" "),s("p",[t._v("从上面我们可以看出：")]),t._v(" "),s("p",[s("strong",[s("code",[t._v("synchronized")]),t._v(" 同步语句块的实现使用的是 "),s("code",[t._v("monitorenter")]),t._v(" 和 "),s("code",[t._v("monitorexit")]),t._v(" 指令，其中 "),s("code",[t._v("monitorenter")]),t._v(" 指令指向同步代码块的开始位置，"),s("code",[t._v("monitorexit")]),t._v(" 指令则指明同步代码块的结束位置。")])]),t._v(" "),s("p",[t._v("当执行 "),s("code",[t._v("monitorenter")]),t._v(" 指令时，线程试图获取锁也就是获取 "),s("strong",[t._v("对象监视器 "),s("code",[t._v("monitor")])]),t._v(" 的持有权。")]),t._v(" "),s("blockquote",[s("p",[t._v("在 Java 虚拟机(HotSpot)中，Monitor 是基于 C++实现的，由"),s("a",{attrs:{href:"https://github.com/openjdk-mirror/jdk7u-hotspot/blob/50bdefc3afe944ca74c3093e7448d6b889cd20d1/src/share/vm/runtime/objectMonitor.cpp",target:"_blank",rel:"noopener noreferrer"}},[t._v("ObjectMonitor"),s("OutboundLink")],1),t._v("实现的。每个对象中都内置了一个 "),s("code",[t._v("ObjectMonitor")]),t._v("对象。")]),t._v(" "),s("p",[t._v("另外，"),s("strong",[s("code",[t._v("wait/notify")]),t._v("等方法也依赖于"),s("code",[t._v("monitor")]),t._v("对象，这就是为什么只有在同步的块或者方法中才能调用"),s("code",[t._v("wait/notify")]),t._v("等方法，否则会抛出"),s("code",[t._v("java.lang.IllegalMonitorStateException")]),t._v("的异常的原因。")])])]),t._v(" "),s("p",[t._v("在执行"),s("code",[t._v("monitorenter")]),t._v("时，会尝试获取对象的锁，如果锁的计数器为 0 则表示锁可以被获取，获取后将锁计数器设为 1 也就是加 1。")]),t._v(" "),s("p",[t._v("在执行 "),s("code",[t._v("monitorexit")]),t._v(" 指令后，将锁计数器设为 0，表明锁被释放。如果获取对象锁失败，那当前线程就要阻塞等待，直到锁被另外一个线程释放为止。")]),t._v(" "),s("h4",{attrs:{id:"_1-3-2-synchronized-修饰方法的的情况"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-2-synchronized-修饰方法的的情况"}},[t._v("#")]),t._v(" 1.3.2. "),s("code",[t._v("synchronized")]),t._v(" 修饰方法的的情况")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SynchronizedDemo2")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("synchronized")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("method")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"synchronized 方法"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),s("p",[s("img",{attrs:{src:"https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/2019-6/synchronized%E5%85%B3%E9%94%AE%E5%AD%97%E5%8E%9F%E7%90%862.png",alt:"synchronized关键字原理"}})]),t._v(" "),s("p",[s("code",[t._v("synchronized")]),t._v(" 修饰的方法并没有 "),s("code",[t._v("monitorenter")]),t._v(" 指令和 "),s("code",[t._v("monitorexit")]),t._v(" 指令，取得代之的确实是 "),s("code",[t._v("ACC_SYNCHRONIZED")]),t._v(" 标识，该标识指明了该方法是一个同步方法。JVM 通过该 "),s("code",[t._v("ACC_SYNCHRONIZED")]),t._v(" 访问标志来辨别一个方法是否声明为同步方法，从而执行相应的同步调用。")]),t._v(" "),s("h4",{attrs:{id:"_1-3-3-总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-3-总结"}},[t._v("#")]),t._v(" 1.3.3.总结")]),t._v(" "),s("p",[s("code",[t._v("synchronized")]),t._v(" 同步语句块的实现使用的是 "),s("code",[t._v("monitorenter")]),t._v(" 和 "),s("code",[t._v("monitorexit")]),t._v(" 指令，其中 "),s("code",[t._v("monitorenter")]),t._v(" 指令指向同步代码块的开始位置，"),s("code",[t._v("monitorexit")]),t._v(" 指令则指明同步代码块的结束位置。")]),t._v(" "),s("p",[s("code",[t._v("synchronized")]),t._v(" 修饰的方法并没有 "),s("code",[t._v("monitorenter")]),t._v(" 指令和 "),s("code",[t._v("monitorexit")]),t._v(" 指令，取得代之的确实是 "),s("code",[t._v("ACC_SYNCHRONIZED")]),t._v(" 标识，该标识指明了该方法是一个同步方法。")]),t._v(" "),s("p",[s("strong",[t._v("不过两者的本质都是对对象监视器 monitor 的获取。")])]),t._v(" "),s("h3",{attrs:{id:"_1-4-说说-jdk1-6-之后的-synchronized-关键字底层做了哪些优化-可以详细介绍一下这些优化吗"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-说说-jdk1-6-之后的-synchronized-关键字底层做了哪些优化-可以详细介绍一下这些优化吗"}},[t._v("#")]),t._v(" 1.4. 说说 JDK1.6 之后的 synchronized 关键字底层做了哪些优化，可以详细介绍一下这些优化吗")]),t._v(" "),s("p",[t._v("JDK1.6 对锁的实现引入了大量的优化，如偏向锁、轻量级锁、自旋锁、适应性自旋锁、锁消除、锁粗化等技术来减少锁操作的开销。")]),t._v(" "),s("p",[t._v("锁主要存在四种状态，依次是：无锁状态、偏向锁状态、轻量级锁状态、重量级锁状态，他们会随着竞争的激烈而逐渐升级。注意锁可以升级不可降级，这种策略是为了提高获得锁和释放锁的效率。")]),t._v(" "),s("p",[t._v("关于这几种优化的详细信息可以查看下面这几篇文章：")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://blog.csdn.net/qq_34337272/article/details/108498442",target:"_blank",rel:"noopener noreferrer"}},[t._v("Java 性能 -- synchronized 锁升级优化"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://www.cnblogs.com/wuqinglong/p/9945618.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Java6 及以上版本对 synchronized 的优化"),s("OutboundLink")],1)])]),t._v(" "),s("h3",{attrs:{id:"_1-5-谈谈-synchronized-和-reentrantlock-的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-谈谈-synchronized-和-reentrantlock-的区别"}},[t._v("#")]),t._v(" 1.5. 谈谈 synchronized 和 ReentrantLock 的区别")]),t._v(" "),s("h4",{attrs:{id:"_1-5-1-两者都是可重入锁"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-1-两者都是可重入锁"}},[t._v("#")]),t._v(" 1.5.1. 两者都是可重入锁")]),t._v(" "),s("p",[s("strong",[t._v("“可重入锁”")]),t._v(" 指的是自己可以再次获取自己的内部锁。比如一个线程获得了某个对象的锁，此时这个对象锁还没有释放，当其再次想要获取这个对象的锁的时候还是可以获取的，如果不可锁重入的话，就会造成死锁。同一个线程每次获取锁，锁的计数器都自增 1，所以要等到锁的计数器下降为 0 时才能释放锁。")]),t._v(" "),s("h4",{attrs:{id:"_1-5-2-synchronized-依赖于-jvm-而-reentrantlock-依赖于-api"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-2-synchronized-依赖于-jvm-而-reentrantlock-依赖于-api"}},[t._v("#")]),t._v(" 1.5.2.synchronized 依赖于 JVM 而 ReentrantLock 依赖于 API")]),t._v(" "),s("p",[s("code",[t._v("synchronized")]),t._v(" 是依赖于 JVM 实现的，前面我们也讲到了 虚拟机团队在 JDK1.6 为 "),s("code",[t._v("synchronized")]),t._v(" 关键字进行了很多优化，但是这些优化都是在虚拟机层面实现的，并没有直接暴露给我们。"),s("code",[t._v("ReentrantLock")]),t._v(" 是 JDK 层面实现的（也就是 API 层面，需要 lock() 和 unlock() 方法配合 try/finally 语句块来完成），所以我们可以通过查看它的源代码，来看它是如何实现的。")]),t._v(" "),s("h4",{attrs:{id:"_1-5-3-reentrantlock-比-synchronized-增加了一些高级功能"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-3-reentrantlock-比-synchronized-增加了一些高级功能"}},[t._v("#")]),t._v(" 1.5.3.ReentrantLock 比 synchronized 增加了一些高级功能")]),t._v(" "),s("p",[t._v("相比"),s("code",[t._v("synchronized")]),t._v("，"),s("code",[t._v("ReentrantLock")]),t._v("增加了一些高级功能。主要来说主要有三点：")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("等待可中断")]),t._v(" : "),s("code",[t._v("ReentrantLock")]),t._v("提供了一种能够中断等待锁的线程的机制，通过 "),s("code",[t._v("lock.lockInterruptibly()")]),t._v(" 来实现这个机制。也就是说正在等待的线程可以选择放弃等待，改为处理其他事情。")]),t._v(" "),s("li",[s("strong",[t._v("可实现公平锁")]),t._v(" : "),s("code",[t._v("ReentrantLock")]),t._v("可以指定是公平锁还是非公平锁。而"),s("code",[t._v("synchronized")]),t._v("只能是非公平锁。所谓的公平锁就是先等待的线程先获得锁。"),s("code",[t._v("ReentrantLock")]),t._v("默认情况是非公平的，可以通过 "),s("code",[t._v("ReentrantLock")]),t._v("类的"),s("code",[t._v("ReentrantLock(boolean fair)")]),t._v("构造方法来制定是否是公平的。")]),t._v(" "),s("li",[s("strong",[t._v("可实现选择性通知（锁可以绑定多个条件）")]),t._v(": "),s("code",[t._v("synchronized")]),t._v("关键字与"),s("code",[t._v("wait()")]),t._v("和"),s("code",[t._v("notify()")]),t._v("/"),s("code",[t._v("notifyAll()")]),t._v("方法相结合可以实现等待/通知机制。"),s("code",[t._v("ReentrantLock")]),t._v("类当然也可以实现，但是需要借助于"),s("code",[t._v("Condition")]),t._v("接口与"),s("code",[t._v("newCondition()")]),t._v("方法。")])]),t._v(" "),s("blockquote",[s("p",[s("code",[t._v("Condition")]),t._v("是 JDK1.5 之后才有的，它具有很好的灵活性，比如可以实现多路通知功能也就是在一个"),s("code",[t._v("Lock")]),t._v("对象中可以创建多个"),s("code",[t._v("Condition")]),t._v("实例（即对象监视器），"),s("strong",[t._v("线程对象可以注册在指定的"),s("code",[t._v("Condition")]),t._v("中，从而可以有选择性的进行线程通知，在调度线程上更加灵活。 在使用"),s("code",[t._v("notify()/notifyAll()")]),t._v("方法进行通知时，被通知的线程是由 JVM 选择的，用"),s("code",[t._v("ReentrantLock")]),t._v("类结合"),s("code",[t._v("Condition")]),t._v("实例可以实现“选择性通知”")]),t._v(" ，这个功能非常重要，而且是 Condition 接口默认提供的。而"),s("code",[t._v("synchronized")]),t._v("关键字就相当于整个 Lock 对象中只有一个"),s("code",[t._v("Condition")]),t._v("实例，所有的线程都注册在它一个身上。如果执行"),s("code",[t._v("notifyAll()")]),t._v("方法的话就会通知所有处于等待状态的线程这样会造成很大的效率问题，而"),s("code",[t._v("Condition")]),t._v("实例的"),s("code",[t._v("signalAll()")]),t._v("方法 只会唤醒注册在该"),s("code",[t._v("Condition")]),t._v("实例中的所有等待线程。")])]),t._v(" "),s("p",[s("strong",[t._v("如果你想使用上述功能，那么选择 ReentrantLock 是一个不错的选择。性能已不是选择标准")])])])}),[],!1,null,null,null);n.default=e.exports}}]);